import streamlit as st
import datetime
import dateutil
import dateutil.relativedelta
import ticktick
import json
import ticktick.api
import ticktick.cache
from ticktick.oauth2 import OAuth2        # OAuth2 Manager
from ticktick.api import TickTickClient   # Main Interface
from dotenv import load_dotenv
import os
import pandas as pd
import time

def onStartUp():
    st.session_state['initialized'] = True
    load_dotenv()
    clientId = os.getenv('CLIENT_ID')
    clientSecret = os.getenv('CLIENT_SECRET')
    email = os.getenv('EMAIL')
    password = os.getenv('PASSWORD')
    auth_client = OAuth2(client_id=clientId,
                         client_secret=clientSecret,
                         redirect_uri="http://127.0.0.1:8080")
    client = TickTickClient(email, password, auth_client)
    #gets the two projects to mess with
    foodList = client.get_by_fields(name='FoodSchedule', search='projects')
    todayInsertList = client.get_by_fields(name='Today AutoGenerated', search='projects')

    foodItems = client.get_by_fields(projectId=foodList['id'], search='tasks')
    print(foodItems[0])

    #food items
    PreWorkoutChoices = [task['title'] for task in foodItems if "preworkout" in task['tags']]
    AfterWorkoutChoices = [task['title'] for task in foodItems if "afterworkout" in task['tags']]
    Breakfast = [task['title'] for task in foodItems if "breakfast" in task['tags']]
    Snack = [task['title'] for task in foodItems if "snack" in task['tags']]
    Lunch = [task['title'] for task in foodItems if "lunch" in task['tags']]
    Dinner = [task['title'] for task in foodItems if "dinner" in task['tags']]
    EndDay = [task['title'] for task in foodItems if "endday" in task['tags']]
    data = {
        "PreWorkoutChoices": PreWorkoutChoices,
        "AfterWorkoutChoices": AfterWorkoutChoices,
        "Breakfast": Breakfast, 
        "Snack": Snack,
        "Lunch": Lunch,
        "Dinner": Dinner,
        "EndDay": EndDay,
        "foodItems" : foodItems,
        "todayInsertList": todayInsertList,
        "client": client
    }
    st.session_state['data'] = data

if 'initialized' not in st.session_state:
    onStartUp()

selectedDate = st.date_input('Pick meals day')
selectedTime = st.time_input('Pick wakeup time')

PreWorkoutChoices = st.session_state['data']['PreWorkoutChoices']
AfterWorkoutChoices = st.session_state['data']['AfterWorkoutChoices']
Breakfast = st.session_state['data']['Breakfast']
Snack = st.session_state['data']['Snack']
Lunch = st.session_state['data']['Lunch']
Dinner = st.session_state['data']['Dinner']
EndDay = st.session_state['data']['EndDay']
todayInsertList = st.session_state['data']['todayInsertList']
foodItems = st.session_state['data']['foodItems']
client = st.session_state['data']['client']

st.title("Pick Food")
selectedPreWorkout = st.selectbox("Pick a Pre Workout:", PreWorkoutChoices)
selectedWorkout = st.selectbox("Pick a Post Workout:", AfterWorkoutChoices)
selectedBreakfast = st.selectbox("Pick a Breakfast:", Breakfast)
selectedSnack = st.selectbox("Pick a Snack:", Snack)
selectedLunch = st.selectbox("Pick a Lunch:", Lunch)
selectedDinner = st.selectbox("Pick a Dinner:", Dinner)
selectedEndDay = st.selectbox("Pick an End of Day Meal:", EndDay)

submit_button = st.button("Submit")
cancelButton = st.button("Cancel")
def close_browser_window():
    # Custom JavaScript to close the window/tab.
    st.markdown("""
        <script type="text/javascript">
            window.close();
        </script>
    """, unsafe_allow_html=True)

if submit_button:
    taskCreationList = []
    #next just to make sure get only 1
    taskCreationList.append(next(task for task in foodItems if selectedPreWorkout == task['title']))
    taskCreationList.append(next(task for task in foodItems if selectedWorkout == task['title']))
    taskCreationList.append(next(task for task in foodItems if selectedBreakfast == task['title']))
    taskCreationList.append(next(task for task in foodItems if selectedSnack == task['title']))
    taskCreationList.append(next(task for task in foodItems if selectedLunch == task['title']))
    taskCreationList.append(next(task for task in foodItems if selectedDinner == task['title']))
    taskCreationList.append(next(task for task in foodItems if selectedEndDay == task['title']))

    mealCountDown = 0
    startBase = datetime.datetime.combine(selectedDate, selectedTime)
    datetimeStarts = [datetime.timedelta(0), datetime.timedelta(minutes=45), datetime.timedelta(minutes=90)
                             , dateutil.relativedelta.relativedelta(hours=5), dateutil.relativedelta.relativedelta(hours=7),
                             dateutil.relativedelta.relativedelta(hours=11), 
                             dateutil.relativedelta.relativedelta(hours=14)]
    datetimeEnds = [datetime.timedelta(minutes=10), datetimeStarts[1] + datetime.timedelta(minutes=15), 
                            datetimeStarts[2] + datetime.timedelta(minutes=30), datetimeStarts[3] + dateutil.relativedelta.relativedelta(minutes=15), 
                            datetimeStarts[4] + dateutil.relativedelta.relativedelta(minutes=45), datetimeStarts[5] + dateutil.relativedelta.relativedelta(minutes=60)
                            , datetimeStarts[6] + dateutil.relativedelta.relativedelta(minutes=40)]
    descriptionArray = ["preworkout", "afterworkout", "breakfast", "snack", "lunch", "dinner", "endday"]
    for task in taskCreationList:
        taskNew = client.task.builder(title=task['title'], projectId=todayInsertList['id'],
                                      content=descriptionArray[mealCountDown],
                                     startDate=startBase + datetimeStarts[mealCountDown], 
                                     dueDate=startBase + datetimeEnds[mealCountDown])
        client.task.create(taskNew)
        mealCountDown += 1
    st.write(f"You are free to go enjoy meals")
    time.sleep(1)
    close_browser_window()
    os._exit(0)
    

if cancelButton:
    close_browser_window()
    os._exit(0)
    